#
# Cookbook Name:: mconf-live
# Recipe:: default
# Author:: Felipe Cecagno (<felipe@mconf.org>)
# Author:: Mauricio Cruz (<brcruz@gmail.com>)
#
# This file is part of the Mconf project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

template "/var/www/bigbluebutton/client/conf/config.xml" do
  source "config.xml.erb"
  mode "0644"
  variables(
    :module_version => node[:mconf][:live][:version_int],
    :streaming => node[:mconf][:streaming][:enabled]
  )
end

{ "bbb_api_conf.jsp.erb" => "/var/lib/tomcat6/webapps/demo/bbb_api_conf.jsp",
  "bigbluebutton.properties.erb" => "/var/lib/tomcat6/webapps/bigbluebutton/WEB-INF/classes/bigbluebutton.properties" }.each do |k,v|
  template v do
    source k
    group "tomcat6"
    owner "tomcat6"
    mode "0644"
    variables(
      :server_url => node[:bbb][:server_url],
      :salt => node[:bbb][:salt]
    )
    notifies :run, "execute[restart bigbluebutton]", :delayed
    only_if do File.exists?(File.dirname(v)) end
  end
end

{ "bigbluebutton.yml.erb" => "/usr/local/bigbluebutton/core/scripts/bigbluebutton.yml" }.each do |k,v|
  template v do
    source k
    group "tomcat6"
    owner "tomcat6"
    mode "0644"
    variables(
      :server_url => node[:bbb][:server_url],
      :salt => node[:bbb][:salt]
    )
    only_if do File.exists?(File.dirname(v)) end
  end
end

{ "mconf-default.pdf" => "/var/www/bigbluebutton-default/mconf-default.pdf",
  "layout.xml" => "/var/www/bigbluebutton/client/conf/layout.xml",
  "layout-streaming.xml" => "/var/www/bigbluebutton/client/conf/layout-streaming.xml",
  "help.html" => "/var/www/bigbluebutton-default/help.html" }.each do |k,v|
    cookbook_file v do
      source k
      mode "0644"
    end
end

{ "bigbluebutton-sip.properties.erb" => "/usr/share/red5/webapps/sip/WEB-INF/bigbluebutton-sip.properties" }.each do |k,v|
  template v do
    source k
    mode "0644"
    notifies :run, "execute[restart bigbluebutton]", :delayed
  end
end

template "/var/www/bigbluebutton-default/index.html" do
  source "index.html.erb"
  mode "0644"
  variables(
    :redirect_url => node[:bbb][:demo][:enabled]? "/demo/demo_mconf.jsp": "http://mconf.org"
  )
end

decrypt_god = "/etc/bigbluebutton/god/conf/mconf-god-conf.rb"
decrypt_god_disabled = "#{decrypt_god}.disabled"
ruby_block "configure decrypt" do
  block do
    if node[:mconf][:recording_server][:enabled]
      FileUtils.move decrypt_god_disabled, decrypt_god if File.exists?(decrypt_god_disabled)
    else
      FileUtils.move decrypt_god, decrypt_god_disabled if File.exists?(decrypt_god)
    end
  end
  only_if do File.exists?(decrypt_god) != node[:mconf][:recording_server][:enabled] end
  notifies :restart, "service[bbb-record-core]", :immediately
end

# the "mconf" playback is the encrypted recording workflow
execute "configure recording workflow" do
  if node[:mconf][:recording_server][:enabled]
    command "bbb-record --enable presentation && bbb-record --disable mconf"
  else
    command "bbb-record --enable mconf && bbb-record --disable presentation"
  end
  action :run
end

directory "/var/log/bigbluebutton/mconf" do
  action :create
  owner "tomcat6"
  group "tomcat6"
  mode 00755
  only_if do not node[:mconf][:recording_server][:enabled] end
end

chef_gem "open4" do
  version "1.3.0"
  action :install
end

require 'open4'

ruby_block "generate recording server keys" do
    block do
        def execute(command)
            status = Open4::popen4(command) do | pid, stdin, stdout, stderr|
                Chef::Log.info("Executing: #{command}")

                output = stdout.readlines
                Chef::Log.info("stdout: #{Array(output).join()} ") unless output.empty?

                errors = stderr.readlines
                Chef::Log.error("stderr: #{Array(errors).join()}") unless errors.empty?
            end
            if not status.success?
                raise "Execution failed, raising an exception"
            end
        end

        execute("openssl genrsa -out #{node[:mconf][:recording_server][:private_key_path]} 2048")
        execute("openssl rsa -in #{node[:mconf][:recording_server][:private_key_path]} -out #{node[:mconf][:dir]}/public_key.pem -outform PEM -pubout")

        # The following code doesn't work because the RSA key generated by Ruby 
        # OpenSSL is formatted in a way that the openssl application doesn't
        # understand
        # http://stackoverflow.com/questions/4635837/invalid-public-keys-when-using-the-ruby-openssl-library
        #rsa_key = OpenSSL::PKey::RSA.new(2048)
        #private_key = rsa_key.to_pem
        #File.open("#{node[:mconf][:recording_server][:private_key_path]}", 'w') {|f| f.write(private_key) }
        #public_key = rsa_key.public_key.to_pem
        #node.set[:keys][:recording_server_public] = "#{public_key}"
    end
    only_if do node[:mconf][:recording_server][:enabled] and not File.exists?(node[:mconf][:recording_server][:private_key_path]) end
end

ruby_block "save public key" do
  block do
    node.set[:keys][:recording_server_public] = File.read("#{node[:mconf][:dir]}/public_key.pem")
  end
  only_if do node[:mconf][:recording_server][:enabled] and File.exists?("#{node[:mconf][:dir]}/public_key.pem") end
end

Dir["/var/bigbluebutton/published/**/metadata.xml"].each do |filename|
    execute "update server url metadata" do
        # extra escape needed
        command "sed -i 's \\(https\\?://[^/]*\\)/\\(mconf\\|presentation\\)/ #{node[:bbb][:server_url]}/\\2/ g' #{filename}"
        user "root"
        action :run
        only_if do File.exists?(filename) end
    end
end

# \TODO remove files from non recorded sessions
# \TODO create cron jobs to handle such files
ruby_block "remove raw data of encrypted recordings" do
    block do
        Dir["/var/bigbluebutton/published/mconf/*"].each do |dir|
            meeting_id = File.basename(dir)
            if not File.exists?("/var/bigbluebutton/recordings/raw/#{meeting_id}")
                Chef::Log.info "The recording #{meeting_id} is published so the video, audio and deskshare files aren't needed anymore"
                FileUtils.rm_r [ "/usr/share/red5/webapps/video/streams/#{meeting_id}",
                                 "/usr/share/red5/webapps/deskshare/streams/#{meeting_id}",
                                 Dir.glob("/var/freeswitch/meetings/#{meeting_id}*.wav") ], :force => true
            end
        end
    end
    only_if do not node[:mconf][:recording_server][:enabled] end
end

template "/usr/local/bigbluebutton/core/scripts/mconf.yml" do
  source "mconf.yml.erb"
  mode 00644
  variables(
    :get_recordings_url => node[:mconf][:recording_server][:get_recordings_url],
    :private_key => node[:mconf][:recording_server][:private_key_path]
  )
  only_if do node[:mconf][:recording_server][:enabled] end
end

ruby_block "early exit" do
  block do
    raise "Early exit!"
  end
  action :nothing
end